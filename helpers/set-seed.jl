using Random


function set_seed!(ntaxa::Int64, rep::Int64, ils::String, ngt::Int64, m::Int64, sim_idx::Int64)
    Random.seed!(ntaxa)
    randi_offset!(rep)
    randi_offset!(ngt)
    randi_offset!(m)
    randi_offset!(Int64(ils[1]))    # low, med, high, veryhigh --> 108, 109, 104, 118 respectively
    randi_offset!(sim_idx)
    
    final_seed = abs(rand(Int64))
    Random.seed!(final_seed)
    return final_seed
end

# Helper function
randi_offset!(offset::Int64) = Random.seed!(abs(rand(Int64)) + offset)


"""
Verifies that the random seeds generated by `set_seed!` are unique for all network replicates.
"""
function verify_seeds_unique()
    for ntaxa in [50, 100, 200, 500, 1000, 2500]
        for rep in 1:100
            uq_seeds = Set{Int64}()
            n = 4 * 9 * 6 * 100

            for ils in ["low", "med", "high", "veryhigh"]
                for ngt in [10, 25, 50, 100, 250, 500, 1000, 2500, 5000]
                    for m in [5, 10, 15, 20, 25, 30]
                        for sim_idx = 1:100
                            push!(uq_seeds,
                                set_seed!(ntaxa, rep, ils, ngt, m, sim_idx)
                            )
                        end
                    end
                end
            end

            if length(uq_seeds) != n
                throw(ErrorException("Found non-unique seed - $(length(uq_seeds)) seeds over $(n) iterations."))
            end
        end

        @info "âœ“ $(ntaxa)"
    end
end

